const test = require('tap').test;
const Utils = require('../../src/utils.js');
const Triggers = require('../../src/triggers.js');
const natural = require('natural');

// This test set was generated by Tina Quach reading various expected utterances
// and capturing all mismatches.
var mismatches = [
   {
      "make project":"big project"
   },
   {
      "delete project":"Glee project"
   },
   {
      "delete the project":"Frida project"
   },
   {
      "delete current project":"the current project"
   },
   {
      "rename current project to new name":"rename current project new name"
   },
   {
      "change name of tina project to to nina":"change name of t-nuts project to Nina"
   },
   {
      "see inside":"the inside"
   },
   {
      "i\'m done":"I\'m done"
   },
   {
      "i\'m finished":"I\'m finished"
   },
   {
      "scratch let\'s dance":"freshlook stands"
   },
   {
      "scratch play let\'s dance":"scratch play Let\'s Dance"
   },
   {
      "play let\'s dance":"play Let\'s Dance"
   },
   {
      "play the project":"play the projects"
   },
   {
      "start the project":"play the project"
   },
   {
      "test the project":"the project"
   },
   {
      "test the current project":"the current project"
   },
   {
      "get current project":"the current project"
   },
   {
      "what’s my current step":"what\'s my current stuff"
   },
   {
      "go to step (.*)":"go to Step One"
   },
   {
      "what\'s step 6":"what step six"
   },
   {
      "what is step 6":"what is sepsis"
   },
   {
      "next step":"Next Step"
   },
   {
      "play step":"play stop"
   },
   {
      "play current step":"play current stop"
   },
   {
      "insert say something after step 6":"insert say something after some Step 2"
   },
   {
      "delete step 6":"3 step 6"
   },
   {
      "replace step 6 with 6":"replace tub 6 with say something"
   },
   {
      "scratch stop":"craft stop"
   }
]

// Tina then denoted what mismatches correspond to
// which triggerType.
var mismatchesByGeneralTrigger = [
   {
      "newProject":"big project"
   },
   {
      "deleteProject":"Glee project"
   },
   {
     "deleteProject":"Frida project"
   },
   {
      "deleteProject":"the current project"
   },
   {
      "renameCurrentProject":"rename current project new name"
   },
   {
      "renameProject":"change name of t-nuts project to Nina"
   },
   {
      "editProject":"the inside"
   },
   {
      "finishProject":"I\'m done"
   },
   {
      "finishProject":"I\'m finished"
   },
   {
      "play":"freshlook stands"
   },
   {
      "play":"scratch play Let\'s Dance"
   },
   {
      "play":"play Let\'s Dance"
   },
   {
      "playCurrentProject":"play the projects"
   },
   {
      "playCurrentProject":"play the project"
   },
   {
      "playCurrentProject":"the project"
   },
   {
      "playCurrentProject":"play the current project"
   },
   {
      "getCurrentProject":"get the current project"
   }]

mismatchesByEditProjectTrigger = [
	{
	  "getCurrentStep":"what\'s my current stuff"
	},
	{
	  "goToStep":"go to Step One"
	},
	{
	  "goToStep":"what step six"
	},
	{
	  "goToStep":"what is sepsis"
	},
	{
	  "nextStep":"Next Step"
	},
	{
	  "playStep":"play stop"
	},
	{
	  "playCurrentStep":"play current stop"
	},
	{
	  "insertStepBefore":"insert say something before some Step 2"
	},
	{
	  "insertStepAfter":"insert say something after some Step 2"
	},
	{
	  "deleteStep":"3 step 6"
	},
	{
	  "replaceStep":"replace tub 6 with say something"
	},
	{
	  "stopEditing":"craft stop"
	}]

var experiment = function() {
	mismatches = '[{"make project":"big project"},{"delete project":"Glee project"},{"delete the project":"Frida project"},{"delete current project":"the current project"},{"rename current project to new name":"rename current project new name"},{"change name of tina project to to nina":"change name of t-nuts project to Nina"},{"see inside":"the inside"},{"i\'m done":"I\'m done"},{"i\'m finished":"I\'m finished"},{"scratch let\'s dance":"freshlook stands"},{"scratch play let\'s dance":"scratch play Let\'s Dance"},{"play let\'s dance":"play Let\'s Dance"},{"play the project":"play the projects"},{"start the project":"play the project"},{"test the project":"the project"},{"test the current project":"the current project"},{"get current project":"the current project"},{"what’s my current step":"what\'s my current stuff"},{"go to step (.*)":"go to Step One"},{"what\'s step 6":"what step six"},{"what is step 6":"what is sepsis"},{"next step":"Next Step"},{"play step":"play stop"},{"play current step":"play current stop"},{"insert say something after step 6":"insert say something after some Step 2"},{"delete step 6":"3 step 6"},{"replace step 6 with 6":"replace tub 6 with say something"},{"scratch stop":"craft stop"}]'
	mismatches = JSON.parse(mismatches)

	/**
	 * Get the grammar rules in JSFG V1.0 format.
	 * @param {!Object} triggerMap - map of trigger types to regular expressions
	 * @return {!String} the grammar rules
	 */
	var getTargets = function(triggerMap) {
		var targets = {}
		for (var triggerType in triggerMap) {
			var regexString = triggerMap[triggerType].toString().replace(/\(\.\*\)/g,"");
			var matches = regexString.substring(1,regexString.length-1).split('|');
			targets[triggerType] = matches;
		}
		return targets
	}

	var printDistances = function(target, utterance) {
		console.dir(target);
		console.dir(utterance);
		console.log('natural.JaroWinklerDistance');
		console.log(natural.JaroWinklerDistance(target, utterance));
		console.log('natural.LevenshteinDistance');
		console.log(natural.LevenshteinDistance(target, utterance));
		console.log('\n');
	}

	mismatches.forEach((mistake) => {
		var mistake = Object.entries(mistake)[0]
		var target = mistake[0]
		var utterance = mistake[1]


		targetMap = getTargets(Triggers.general);
		for (var triggerType in targetMap) {
			targetMap[triggerType].forEach((target) => {
				printDistances(target, utterance)
			});
		}

		targetMap = getTargets(Triggers.editProject);
		for (var triggerType in targetMap) {
			targetMap[triggerType].forEach((target) => {
			printDistances(target, utterance)
			});
		}
	});
}

var generateGeneralTriggerTest = (mistake) => {
	writeTest(mistake, Triggers.general);
}

var generateEditProjectTriggerTest = (mistake) => {
	writeTest(mistake, Triggers.editProject);
}

var writeTest = (mistake, triggers) => {
	var mistake = Object.entries(mistake)[0]
	var target = mistake[0]
	var utterance = mistake[1]
	test(utterance + " should see triggerType: " +  target, t => {
         Utils.getRhymeMatches(text, grammarList)
			var result = Utils.fuzzyMatch(utterance, triggers);
			console.log(result);
	    t.same(result[0], target);
	  t.end();
	});
}

mismatchesByGeneralTrigger.forEach(generateGeneralTriggerTest);
mismatchesByEditProjectTrigger.forEach(generateEditProjectTriggerTest);
