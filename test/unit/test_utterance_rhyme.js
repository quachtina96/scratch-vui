const test = require('tap').test;
const Utils = require('../../src/utils.js').Utils;
const ScratchStateMachine = require('../../src/scratch_state_machine.js');
const natural = require('natural');

// This test set was generated by Tina Quach reading various expected utterances
// and capturing all mismatches.
var mismatches = [
   {
      "make project":"big project"
   },
   {
      "delete project":"Glee project"
   },
   {
      "delete the project":"Frida project"
   },
   {
      "delete current project":"the current project"
   },
   {
      "rename current project to new name":"rename current project new name"
   },
   {
      "change name of tina project to to nina":"change name of t-nuts project to Nina"
   },
   {
      "see inside":"the inside"
   },
   {
      "i\'m done":"I\'m done"
   },
   {
      "i\'m finished":"I\'m finished"
   },
   {
      "scratch let\'s dance":"freshlook stands"
   },
   {
      "scratch play let\'s dance":"scratch play Let\'s Dance"
   },
   {
      "play let\'s dance":"play Let\'s Dance"
   },
   {
      "play the project":"play the projects"
   },
   {
      "start the project":"play the project"
   },
   {
      "test the project":"the project"
   },
   {
      "test the current project":"the current project"
   },
   {
      "get current project":"the current project"
   },
   {
      "whatâ€™s my current step":"what\'s my current stuff"
   },
   {
      "go to step (.*)":"go to Step One"
   },
   {
      "what\'s step 6":"what step six"
   },
   {
      "what is step 6":"what is sepsis"
   },
   {
      "next step":"Next Step"
   },
   {
      "play step":"play stop"
   },
   {
      "play current step":"play current stop"
   },
   {
      "insert say something after step 6":"insert say something after some Step 2"
   },
   {
      "delete step 6":"3 step 6"
   },
   {
      "replace step 6 with 6":"replace tub 6 with say something"
   },
   {
      "scratch stop":"craft stop"
   }
]

test("getOrderedMatchString", t => {
  var matches = [
      ['one', 1],
      ['two', 2],
      ['three',3],
      ['four', 4]
    ];
  t.same(Utils.getOrderedMatchString(matches), 'one two three four');
  t.end()
});

test("what is sepsis", t => {
  // Mock a speech grammar list.
  var grammarList = [
    {
      src: "data:application/xml,%23JSGF%20V1.0%3B%0A%09grammar%20scratch_state_machine.project%3B%20%0A%0A%09<project>%20%3Dbig%20water%20bottle%7Ctell%20me%20my%20itinerary%7Chappy%20project%7Clet%27s%20dance%7Cgive%20me%20a%20call%7Ctell%20me%20joke%7Cget%20ready%20for%20the%20dance%20party%7Cgive%20me%20compliment%7Cit%27s%20crazy%20time%7Csing%20a%20song%7Cgive%20me%20a%20compliment%7Cscratch%20create%20a%20new%20project%3B%0A",
      weight: 1
    },
    {
      src: "data:application/xml,%23JSGF%20V1.0%3B%0A%09//%20Import%20the%20grammar%20that%20includes%20the%20name%20of%20the%20projects%0A%09import%20<scratch_state_machine.project>%0A%0A%09grammar%20scratch_state_machine.command%3B%0A%0A%09public%20<newProject>%20%3D%20new%20project%7Ccreate%20new%20project%7Ccreate%20project%7Cmake%20new%20project%7Cmake%20project%3B%0A%0A%09public%20<editExistingProject>%20%3D%20see%20inside%20%3B%0A%0A%09public%20<editProject>%20%3D%20see%20inside%3B%0A%0A%09public%20<finishProject>%20%3D%20i%27m%20done%7Ci%27m%20finished%3B%0A%0A%09public%20<play>%20%3D%20scratch%20<project>%7Cscratch%20play%20<project>%7Cplay%20<project>%7C%3B%0A%0A%09public%20<playCurrentProject>%20%3D%20play%20project%7Cstart%20project%7Cplay%20current%20project%7Ctest%20project%3B%0A%0A%09public%20<return>%20%3D%20stop%7Ci%27m%20done%7Cgo%20back%7Cquit%7Cexit%3B%0A%0A%09public%20<getProjectNames>%20%3D%20what%20projects%20do%20i%20have%7Cwhat%20have%20i%20made%20so%20far%7Cwhat%20are%20my%20projects%20called%3B%0A%0A%09public%20<getProjectCount>%20%3D%20how%20many%20projects%20do%20i%20have%7Chow%20many%20projects%20have%20i%20made%3B%0A%09public%20<goToStep>%20%3D%20go%20to%20step%20%7Cwhat%27s%20step%20%7Cwhat%20is%20step%20%3B%0A%0A%09public%20<nextStep>%20%3D%20go%20to%20next%20step%7Cnext%20step%7Cwhat%27s%20next%3B%0A%0A%09public%20<previousStep>%20%3D%20previous%20step%7Cgo%20back%20a%20step%3B%0A%0A%09public%20<playStep>%20%3D%20play%20step%7Cplay%20current%20step%7Cwhat%20does%20it%20do%3B%0A%0A%09public%20<insertStepBefore>%20%3D%20insert%20before%20step%20%7C%20before%20step%20%3B%0A%0A%09public%20<insertStepAfter>%20%3D%20insert%20after%20step%20%7C%20after%20step%20%3B%0A%0A%09public%20<deleteStep>%20%3D%20delete%20step%20%3B%0A%0A%09public%20<replaceStep>%20%3D%20replace%20step%20<number>%20with%20%3B%0A%0A%09public%20<replaceSound>%20%3D%20replace%20the%20<sound_name>%20sound%20with%20the%20<sound_name>%20sound%3B%0A%0A%09public%20<replaceInStep>%20%3D%20in%20step%20<number>%20replace%20%20with%20%3B%0A%0A%09public%20<stopEditing>%20%3D%20stop%7Ci%27m%20done%7Cthat%27s%20it%3B",
      weight: 1
    },
    {
      src: "data:application/xml,%23JSGF%20V1.0%3B%0Agrammar%20scratch_state_machine.numbers%3B%0Apublic%20<number>%20%3D%20zero%20%7C%20one%20%7C%20two%20%7C%20three%20%7C%20four%20%7C%20five%20%7C%20six%20%7C%20seven%20%7C%20eight%20%7C%20nine%20%7C%20ten%20%7C%20eleven%20%7C%20twelve%20%7C%20thirteen%20%7C%20fourteen%20%7C%20fifteen%20%7C%20sixteen%20%7C%20seventeen%20%7C%20eighteen%20%7C%20nineteen%20%7C%20twenty%20%7C%20thirty%20%7C%20forty%20%7C%20fifty%20%7C%20sixty%20%7C%20seventy%20%7C%20eighty%20%7C%20ninety%20%7C%20thousand%20%7C%20million%20%7C%20billion%20%7C%20trillion%20%7C%20quadrillion%20%7C%20quintillion%20%7C%20sextillion%20%7C%20septillion%20%7C%20octillion%20%7C%20nonillion%20%7C%20decillion%3B%0A",
      weight: 1,
    },
    {
      src: "data:application/xml,%23JSGF%20V1.0%3B%0Agrammar%20scratch_state_machine.sounds%3B%0Apublic%20<sound_name>%20%3D%20meow%7Cmoo%7Cboing%7Cdroplet%27%3B",
      weight: 1,
    }
  ]
  var text = "what is sepsis"
  t.same(Utils.getRhymeMatches(text, grammarList), 'what is step six')
  t.end();
});